<?php

/*
 * This file is part of the Digi Doo s.r.o. sshop project.
 *
 * (c) Digi Doo s.r.o.
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

declare(strict_types=1);

namespace AppBundle\Repository;

use AppBundle\Entity\Manufacturer;
use Doctrine\ORM\Query\Expr\Join;
use Doctrine\ORM\QueryBuilder;
use Sylius\Bundle\ResourceBundle\Doctrine\ORM\EntityRepository;
use Sylius\Component\Core\Model\TaxonInterface;

/**
 * ManufacturerRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ManufacturerRepository extends EntityRepository
{
    public function findOneBySlug(string $slug, string $locale): ?Manufacturer
    {
        return $this->createQueryBuilder('m')
            ->addSelect('translation')
            ->innerJoin('m.translations', 'translation')
            ->andWhere('translation.slug = :slug')
            ->andWhere('translation.locale = :locale')
            ->setParameter('slug', $slug)
            ->setParameter('locale', $locale)
            ->getQuery()
            ->getOneOrNullResult();
    }

    /**
     * Find manufacturers by taxon related to products
     *
     * @param  TaxonInterface $taxon
     *
     * @return []|null
     */
    public function findByTaxon(TaxonInterface $taxon): ?array
    {
        $result = $this->createQueryBuilder('m')
            ->leftJoin("AppBundle\Entity\Product", 'sp', Join::WITH, 'sp.manufacturer = m')
            ->leftJoin("Sylius\Component\Core\Model\ProductTaxon", 'spt', Join::WITH, 'spt.product = sp')
            ->andWhere('spt.taxon = :taxon')
            ->andWhere('m.enabled = true')
            ->andWhere('sp.enabled = true')
            ->setParameter('taxon', $taxon);

        return $result->getQuery()->getResult();
    }

    /**
     * {@inheritdoc}
     */
    public function createShopListQueryBuilder(): QueryBuilder
    {
        return $this->createQueryBuilder('o')
            ->leftJoin('o.translations', 'translation')
            ->andWhere('o.enabled = 1')
        ;
    }

    /**
     * @param string|null $locale
     *
     * @return QueryBuilder
     */
    private function createTranslationBasedQueryBuilder(?string $locale): QueryBuilder
    {
        $queryBuilder = $this->createQueryBuilder('o')
            ->addSelect('translation')
            ->leftJoin('o.translations', 'translation')
        ;

        if (null !== $locale) {
            $queryBuilder
                ->andWhere('translation.locale = :locale')
                ->setParameter('locale', $locale)
            ;
        }

        return $queryBuilder;
    }
}
